{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","className","type","name","placeholder","Recipes","state","recipes","length","err","map","recipe","key","url","src","image","alt","label","substring","to","pathname","App","e","a","async","recipeName","target","elements","value","preventDefault","fetch","process","api_call","json","data","console","log","hits","setState","componentDidMount","item","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","this","React","Component","Recipe","activeRecipe","recipeToFind","match","params","id","request","result","href","Router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f6ca424.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Form = (props) => {\r\n    return(\r\n      <form onSubmit={props.getRecipe} className=\"form\">\r\n          <input type=\"text\" name=\"recipe\" placeholder=\"Recipe Name...\"></input>\r\n          <button>Submit</button>\r\n      </form>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Form;","import React from \"react\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Recipes = (props) => {\r\n  return( \r\n    <div className=\"recipe\">\r\n        {props.state.recipes.length <= 0 && <p>{props.state.err}</p>}\r\n        { props.state.recipes.map((recipe)=> {\r\n          return(\r\n            <div key = {recipe.recipe.url}>\r\n              <img src = {recipe.recipe.image} alt = {recipe.recipe.label}/>\r\n              <p>{recipe.recipe.label.length>20? `${recipe.recipe.label.substring(0,25)}...`:recipe.recipe.label}</p>\r\n              <button> \r\n                 <Link to = {{pathname:`/recipe/${recipe.recipe.label}`}}>View Recipe</Link>\r\n              </button>\r\n            </div>\r\n          );\r\n           \r\n          })\r\n        }\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nexport default Recipes;","import React from 'react';\nimport './App.css';\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\n\n\n\nclass App extends React.Component{\n\n  state = { \n      recipes:[],\n      err :\"\" \n  };\n \n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipe.value;\n    e.preventDefault();\n      if(recipeName){\n        const api_call = await fetch(`https://api.edamam.com/search?q=${recipeName}&app_id=${process.env.REACT_APP_API_ID}&app_key=${process.env.REACT_APP_API_KEY}&from=0&to=10`)\n        const data = await api_call.json();\n        console.log(data)\n        if(data.hits.length>1) {\n          this.setState({recipes:data.hits, err:\"\"}) \n        }\n        else{\n          this.setState({recipes:[], err:\"Recepies with this name does not exist\"})\n        }\n    }else {\n        this.setState({recipes:[],err:\"Please enter the Recipe name\"})  \n          }\n  }\n\n  componentDidMount = () => {\n    const item = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(item);\n    this.setState({recipes:recipes || [] });\n  }\n\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem (\"recipes\",recipes);\n  }\n\n\n  render() {\n    return(\n      <div className=\"wrapper\">\n        <h1 className=\"header\">Recipe search</h1>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes state={this.state} />\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","import React from \"react\";\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass Recipe extends React.Component{\r\n\r\n  state = { \r\n    activeRecipe:[] \r\n  }\r\n \r\n  componentDidMount = async() => {\r\n    const recipeToFind = this.props.match.params.id;\r\n    console.log(recipeToFind);\r\n    const request = await fetch(`https://api.edamam.com/search?q=${recipeToFind}&app_id=${process.env.REACT_APP_API_ID}&app_key=${process.env.REACT_APP_API_KEY}`)\r\n    const result = await request.json();\r\n  \r\n    this.setState({activeRecipe:result.hits[0]})   \r\n   console.log(this.state.activeRecipe.recipe.image)\r\n  }\r\n  \r\n  render() {\r\n    console.log(this.state.activeRecipe)\r\n    return(\r\n      \r\n      <div>\r\n        { this.state.activeRecipe.length!==0 && \r\n        <div className=\"recipePage\">\r\n          <img src = {this.state.activeRecipe.recipe.image} alt = {this.state.activeRecipe.recipe.label}/>\r\n          <h3>{this.state.activeRecipe.recipe.label}</h3>\r\n          <p><span className=\"textdecoration\">Website: </span> <a href={this.state.activeRecipe.recipe.url} target={\"_blank\"}>{this.state.activeRecipe.recipe.url}</a></p>\r\n          <button><Link to=\"/\">Go To Homepage</Link></button>\r\n        </div>\r\n          }  \r\n      </div> \r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Recipe;","import React from \"react\";\r\nimport {BrowserRouter, Route,Switch} from 'react-router-dom';\r\nimport App from \"../App\";\r\nimport Recipe from \"./Recipe\"\r\n\r\nconst Router = (props) => {\r\n    return(\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={App}  />\r\n            <Route path=\"/recipe/:id\"  component={Recipe} />\r\n          </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n\r\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}